// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	domain "myapi/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// StockRepository is an autogenerated mock type for the StockRepository type
type StockRepository struct {
	mock.Mock
}

// CreateStocks provides a mock function with given fields: stocks
func (_m *StockRepository) CreateStocks(stocks []domain.Stock) error {
	ret := _m.Called(stocks)

	if len(ret) == 0 {
		panic("no return value specified for CreateStocks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]domain.Stock) error); ok {
		r0 = rf(stocks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStocks provides a mock function with given fields: tickers
func (_m *StockRepository) GetStocks(tickers []string) []domain.Stock {
	ret := _m.Called(tickers)

	if len(ret) == 0 {
		panic("no return value specified for GetStocks")
	}

	var r0 []domain.Stock
	if rf, ok := ret.Get(0).(func([]string) []domain.Stock); ok {
		r0 = rf(tickers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Stock)
		}
	}

	return r0
}

// NewStockRepository creates a new instance of StockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockRepository {
	mock := &StockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
